{"name":"Pockpack","tagline":"Package to connect and grab information from the Pocket API (formerly read it later)","body":"# PockPack docs\r\n\r\nThis package is for connecting to the [getpocket API](http://getpocket.com/developer/)\r\n\r\nYou'll need to register an app with pocket, and use the generated tokens provided in order for you to be able to connect to the API.\r\n\r\n[![Build Status](https://travis-ci.org/duellsy/pockpack.png?branch=master)](https://travis-ci.org/duellsy/pockpack)\r\n\r\n## Installation\r\n\r\nPockpack is installable via [composer](http://getcomposer.org/doc/00-intro.md), the details are on [packagist, here.](https://packagist.org/packages/duellsy/pockpack)\r\n\r\nAdd the following to the `require` section of your projects composer.json file:\r\n```\r\n\"duellsy/pockpack\": \"2.*\"\r\n```\r\n\r\nIn files that you want to use the Pockpack classes, be sure to add the namespaces\r\nyou're going to use to the top of the file similar to the following,\r\nso your code can reference the classes without issue\r\n````\r\nuse Duellsy\\Pockpack\\Pockpack;\r\nuse Duellsy\\Pockpack\\PockpackAuth;\r\nuse Duellsy\\Pockpack\\PockpackQueue;\r\n````\r\n\r\n## Authenticate\r\n\r\n### Get request token\r\n\r\n```\r\n$pockpath_auth = PockpackAuth::connect();\r\n$request_token = $pockpath_auth->connect($consumer_key);\r\n```\r\n\r\n### Redirect the user to pockets auth page\r\n\r\n```\r\nhttps://getpocket.com/auth/authorize?request_token=YOUR_REQUEST_TOKEN&redirect_uri=YOUR_REDIRECT_URI\r\n```\r\n\r\n### Get users access token\r\n\r\n```\r\n$pockpack = new PockpackAuth();\r\n$access_token = $pockpack->receiveToken($consumer_key, $request_token);\r\n```\r\n\r\n## Get reading list\r\n\r\n### Retreive reading list\r\nThis will return a full list of all active (unarchived) bookmarks, optionally\r\nyou can have it also return extra information such as images\r\n\r\n```\r\n$pockpack = new Pockpack($consumer_key, $access_token);\r\n$list = $pockpack->retrieve($options);\r\n```\r\n\r\nThe options array allows you to control exactly what is returned from the API.\r\nFor the full list of options, please check 'Optional Parameters' section of [the pocket retrieve API](http://getpocket.com/developer/docs/v3/retrieve) (you can also see an example JSON response on this page)\r\n\r\nExample 1: show all favorited bookmarks, complete with images\r\n```\r\n$options = array(\r\n    'state'         => 'all',\r\n    'favorite'      => 1,\r\n    'detailType'    => 'complete'\r\n);\r\n```\r\n\r\nExample 2: show only unread bookmarks, complete with image\r\n```\r\n$options = array(\r\n    'state'         => 'favorite',\r\n    'detailType'    => 'complete'\r\n);\r\n```\r\n\r\n## Add new bookmark\r\n\r\nA simple example of adding a bookmark to your reading list:\r\n```\r\n$link_info = array(\r\n    'url'       => 'http://example.com'\r\n);\r\n\r\n$pockpack = new Pockpack($pocket_consumer_key, $pocket_access_token);\r\n$pockpack_q = new PockpackQueue();\r\n\r\n$pockpack_q->add($link_info);\r\n$pockpack->send($pockpack_q);\r\n```\r\n\r\nThe array that is sent to the add method can contain the following information:\r\n- *item_id* (integer; If you are overwriting a link)\r\n- *ref_id* (integer; A Twitter status id; this is used to show tweet attribution)\r\n- *tags* (array; A list of tags you want to add to this bookmark)\r\n- *time* (timestamp; This is automatically added by the PockpackQueue class)\r\n- *title* (string; An optional title if you want to control it)\r\n- *url* (string; The URL of the item)\r\n\r\n## Modify existing bookmark\r\n\r\nThe main flow to modify a bookmark is as follows\r\n\r\n```\r\n$pockpack = new Pockpack($pocket_consumer_key, $pocket_access_token);\r\n$pockpack_q = new PockpackQueue();\r\n\r\n$pockpack_q->favorite($item_id);\r\n\r\n$pockpack->send($pockpack_q);\r\n```\r\n\r\nYou first need to create the pockpack connection, then add something to the\r\nqueue, and finally send the queue to pocket.\r\n\r\nYou can add as many items to the queue before sending, to send in bulk to\r\nkeep things fast.\r\n\r\n### Archive bookmark\r\n\r\n```\r\n$pockpack_q->archive($item_id);\r\n```\r\n\r\n### Re-add bookmark\r\n\r\n```\r\n$pockpack_q->readd($item_id);\r\n```\r\n\r\n### Favorite bookmark\r\n\r\n```\r\n$pockpack_q->favorite($item_id);\r\n```\r\n\r\n### Unfavorite bookmark\r\n\r\n```\r\n$pockpack_q->unfavorite($item_id);\r\n```\r\n\r\n### Delete bookmark\r\n\r\n```\r\n$pockpack_q->delete($item_id);\r\n```\r\n\r\n\r\n## Contributing\r\n\r\nContributions are encouraged and welcome; to keep things organised, all bugs and requests should be\r\nopened in the github issues tab for the main project, at [duellsy/pockpack/issues](https://github.com/duellsy/pockpack/issues)\r\n\r\nAll pull requests should be made to the develop branch, so they can be tested before being merged into the master branch.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}